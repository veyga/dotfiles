#!/usr/bin/env python3

import subprocess
import json
import sys
from datetime import datetime, timezone
from typing import List, Dict, Any

def get_nodes_data() -> List[Dict[str, Any]]:
    """Get nodes data from kubectl in JSON format."""
    try:
        result = subprocess.run([
            'kubectl', 'get', 'nodes', '-o', 'json'
        ], capture_output=True, text=True, check=True)
        return json.loads(result.stdout)['items']
    except subprocess.CalledProcessError as e:
        print(f"Error running kubectl: {e}", file=sys.stderr)
        sys.exit(1)
    except json.JSONDecodeError as e:
        print(f"Error parsing JSON: {e}", file=sys.stderr)
        sys.exit(1)

def format_age(creation_timestamp: str) -> str:
    """Convert ISO timestamp to human-readable age."""
    try:
        created = datetime.fromisoformat(creation_timestamp.replace('Z', '+00:00'))
        now = datetime.now(timezone.utc)
        elapsed = now - created
        
        total_seconds = int(elapsed.total_seconds())
        
        if total_seconds < 60:
            return f"{total_seconds}s"
        elif total_seconds < 3600:
            minutes = total_seconds // 60
            seconds = total_seconds % 60
            return f"{minutes}m{seconds}s"
        elif total_seconds < 86400:
            hours = total_seconds // 3600
            minutes = (total_seconds % 3600) // 60
            return f"{hours}h{minutes}m" if minutes > 0 else f"{hours}h"
        else:
            days = total_seconds // 86400
            hours = (total_seconds % 86400) // 3600
            return f"{days}d{hours}h" if hours > 0 else f"{days}d"
    except Exception:
        return creation_timestamp

def get_node_status(node: Dict[str, Any]) -> str:
    """Extract node ready status."""
    conditions = node.get('status', {}).get('conditions', [])
    for condition in conditions:
        if condition.get('type') == 'Ready':
            return 'Ready' if condition.get('status') == 'True' else 'NotReady'
    return 'Unknown'

def get_taints(node: Dict[str, Any]) -> str:
    """Extract node taints."""
    taints = node.get('spec', {}).get('taints', [])
    if not taints:
        return '<none>'
    return ','.join([taint.get('key', '') for taint in taints])

def get_label_value(node: Dict[str, Any], label_key: str) -> str:
    """Get label value or return <none> if not found."""
    labels = node.get('metadata', {}).get('labels', {})
    return labels.get(label_key, '<none>')

def print_nodes_table(nodes: List[Dict[str, Any]]):
    """Print formatted table of nodes."""
    # Prepare data rows
    rows = []
    for node in nodes:
        name = node.get('metadata', {}).get('name', '')
        status = get_node_status(node)
        taints = get_taints(node)
        age = format_age(node.get('metadata', {}).get('creationTimestamp', ''))
        instance_type = get_label_value(node, 'node.kubernetes.io/instance-type')
        nodepool = get_label_value(node, 'karpenter.sh/nodepool')
        capacity = get_label_value(node, 'karpenter.sh/capacity-type')
        
        rows.append([name, status, taints, age, instance_type, nodepool, capacity])
    
    # Calculate column widths
    headers = ['NAME', 'STATUS', 'TAINTS', 'AGE', 'INSTANCE_TYPE', 'NODEPOOL', 'CAPACITY']
    widths = [len(header) for header in headers]
    
    for row in rows:
        for i, cell in enumerate(row):
            widths[i] = max(widths[i], len(str(cell)))
    
    # Print header
    header_format = '  '.join(f'{{:<{w}}}' for w in widths)
    print(header_format.format(*headers))
    
    # Print rows
    for row in rows:
        print(header_format.format(*row))

def main():
    """Main function."""
    nodes = get_nodes_data()
    print_nodes_table(nodes)

if __name__ == '__main__':
    main()